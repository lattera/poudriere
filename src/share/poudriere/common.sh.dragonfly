#!/bin/sh
# DRAGONFLY SPECIFIC DEFINITIONS

NULLMOUNT="/sbin/mount_null"
NULLFSREF="null"
NO_ZFS=TRUE
USE_TMPFS=true
JAILED=0
TMPFS_WRKDIR=0
TMPFS_DATA=0
TMPFS_ALL=0
TMPFS_LOCALBASE=0

injail()  {
	chroot ${MASTERMNT}${MY_JOBID+/../${MY_JOBID}} $@
}

jstart () {
	# NO OP on DragonFly
}

jstop () {
	# NO OP on DragonFly
}

jail_runs() {
	[ $# -ne 1 ] && eargs jname
	local mounted=$(check_mount ${1})
	[ -n "${mounted}" ] && return 0
	return 1
}

jail_start() {
	[ $# -lt 2 ] && eargs name ptname setname
	local name=$1
	local ptname=$2
	local setname=$3
	local portsdir=$(pget ${ptname} mnt)
	local arch=$(jget ${name} arch)
	local mnt=$(jget ${name} mnt)
	local needfs="${NULLFSREF} procfs tmpfs"

	[ -d ${DISTFILES_CACHE:-/nonexistent} ] || err 1 "DISTFILES_CACHE directory does not exist. (c.f. poudriere.conf)"

	jail_exists ${name} || err 1 "No such jail: ${name}"
	jail_runs ${name} && err 1 "jail already running: ${MASTERNAME}"
	if [ -z "${NOLINUX}" ]; then
		if [ "${arch}" = "i386" ]; then
			needfs="${needfs} linprocfs"
			sysctl -n compat.linux.osrelease >/dev/null 2>&1 || kldload linux
		fi
	fi
	[ -n "${USE_TMPFS}" ] && needfs="${needfs} tmpfs"
	for fs in ${needfs}; do
		if ! lsvfs $fs >/dev/null 2>&1; then
			if [ $JAILED -eq 0 ]; then
				kldload $fs || err 1 "Required kernel module '${fs}' not found"
			else
				err 1 "please load the $fs module on host using \"kldload $fs\""
			fi
		fi
	done

	mkdir -p ${MASTERMNT}
	# Don't limit MASTERMNT.
	# The testport builds there, so it needs to be unlimited
	# Additionally, the dependency check for bulk all needs a lot of space
	mount_tmpfs tmpfs ${MASTERMNT}

	export HOME=/root
	export USER=root
	export TERM=cons25
	[ -z "${NO_FORCE_PACKAGE}" ] && export FORCE_PACKAGE=yes
	[ -z "${NO_PACKAGE_BUILDING}" ] && export PACKAGE_BUILDING=yes
	[ ${SET_STATUS_ON_START-1} -eq 1 ] && export STATUS=1
	msg_n "Creating the reference jail..."

	cpdup -x -VV -i0 ${mnt}/ ${MASTERMNT}/
	mkdir -p 	${MASTERMNT}/compat/linprocfs \
			${MASTERMNT}/compat/linux/proc \
			${MASTERMNT}/compat/svr4 \
			${MASTERMNT}/distfiles \
			${MASTERMNT}/new_packages/All \
			${MASTERMNT}/new_packages/Latest \
			${MASTERMNT}/options \
			${MASTERMNT}/packages \
			${MASTERMNT}/portdistfiles \
			${MASTERMNT}/poudriere \
			${MASTERMNT}/usr/local

	if [ -d "${CCACHE_DIR:-/nonexistent}" ]; then
		mkdir ${MASTERMNT}/root/.ccache
		echo "WITH_CCACHE_BUILD=yes" >> ${MASTERMNT}/etc/make.conf
		echo "CCACHE_DIR=/root/.ccache" >> ${MASTERMNT}/etc/make.conf
	fi
	echo "PORT_DBDIR=/options" >> ${MASTERMNT}/etc/make.conf
	echo "PORTSDIR=/usr/ports" >> ${MASTERMNT}/etc/make.conf
	echo "PACKAGES=/packages" >> ${MASTERMNT}/etc/make.conf
	echo "DISTDIR=/distfiles" >> ${MASTERMNT}/etc/make.conf

	setup_makeconf ${MASTERMNT}/etc/make.conf ${name} ${ptname} ${setname}
	load_blacklist ${mnt} ${ptname} ${setname}

	test -n "${RESOLV_CONF}" && cp -v "${RESOLV_CONF}" "${MASTERMNT}/etc/"

	msg "Mounting system devices for ${MASTERNAME}"
	do_jail_mounts ${MASTERMNT} ${arch}

	PACKAGES=${POUDRIERE_DATA}/packages/${MASTERNAME}

	[ -d "${portsdir}/ports" ] && portsdir=${portsdir}/ports
	msg "Mounting ports/packages/distfiles"
	
	was_a_bulk_run && stash_packages

	do_portbuild_mounts ${MASTERMNT} ${name} ${ptname} ${setname}
	if [ ! -f ${MASTERMNT}/usr/ports/Mk/bsd.stage.mk ]; then
		echo "NO_STAGE=yes" >> ${MASTERMNT}/etc/make.conf
	fi
	cp -a ${MASTERMNT}/etc ${MASTERMNT}/etc2
	cp -a ${MASTERMNT}/var ${MASTERMNT}/var2

	# set up /usr/local for testport
	JAILMNT=${mnt} injail /usr/sbin/mtree -q -U -f \
	   /usr/ports/Templates/BSD.local.dist -d -e -p /usr/local >/dev/null

	was_a_bulk_run && show_log_info

	# The master jail is malleable so /etc/ can be modified later
	# The slave jails are read only.  All have same source

	export PKGNG=1
	export PKG_EXT="txz"
	export PKG_BIN="${LOCALBASE:-/usr/local}/sbin/pkg-static"
	export PKG_ADD="${PKG_BIN} add"
	export PKG_DELETE="${PKG_BIN} delete -y -f"
	export PKG_VERSION="/poudriere/pkg-static version"

}

jail_stop() {
	[ $# -ne 0 ] && eargs
	local mnt rem
	local AWKCMD1='{ if ($3 ~ mnt && $3 !~ /\/ref/) { print $3 }}'
	local AWKCMD2='{ if ($3 ~ mnt) { print $3 }}'

	# err() will set status to 'crashed', don't override
	[ -n "${CRASHED}" ] || bset status "stop:" 2>/dev/null || :

	cd /
	msg "Umounting file systems"
	mnt=${MASTERMNT%/ref}
	mount | awk -v mnt="${mnt}" "${AWKCMD1}" |  sort -r | xargs umount || :
	
	# We don't want to continue umounting /ref if had any failures so
	# far.  Let's check for mounts, and try 3 more times with 30 second
	# intervals
	
	for verify in A B C; do
		rem=$(mount | awk -v mnt="${mnt}" "${AWKCMD1}" | sort -r)
		if [ -z "${rem}" ]; then
		    break
		else
		    msg "Umounting not entirely successful.  Trying again in 30 seconds."
		    sleep 30
		    umount ${rem} || :
		fi
	done
	
	mount | awk -v mnt="${mnt}" "${AWKCMD2}" |  sort -r | xargs umount || :

	export STATUS=0
}

do_jail_mounts() {
	[ $# -ne 2 ] && eargs mnt arch
	local mnt=$1
	local arch=$2

	mount -t devfs devfs ${mnt}/dev
	mount -t procfs proc ${mnt}/proc
	if [ -z "${NOLINUX}" ]; then
		if [ "${arch}" = "i386" ]; then
			mount -t linprocfs linprocfs ${mnt}/compat/linux/proc
		fi
	fi

	return 0
}

createfs() {
	[ $# -ne 3 ] && eargs name mnt fs
	local mnt
	mnt=$(echo $2 | sed -e "s,//,/,g")

	mkdir -p ${mnt}
}

rollbackfs() {
	echo "The rollbackfs function is not used in DragonFly"
}

umountfs() {
	echo "The umountfs function is not used in DragonFly"

}

start_builders() {
	local task mnt

	bset builders "${JOBS}"
	bset status "starting_builders:"
	for task in ${JOBS}; do
		local mnt="${MASTERMNT%/ref}/${task}"
		mkdir -p ${mnt}
		touch ${mnt}/virgin
	done
	bset epoch "$(date '+%s')"
}

stop_builders() {
	local mnt

	# wait for the last running processes
	cat ${MASTERMNT}/poudriere/var/run/*.pid 2>/dev/null | xargs pwait 2>/dev/null

	msg "Stopping ${PARALLEL_JOBS} builders"

	# wait for slaves to finish dismounting
	sleep 3

	cd /
	mnt=${MASTERMNT%/ref}
	mount | awk -v mnt="${mnt}" '{ if ($3 ~ mnt && $3 !~ /\/ref/) { print $3 }}' |  sort -r | xargs umount || :

	# No builders running, unset JOBS
	JOBS=""
}

zfs_getfs() {
	# Return nothing to indicate NO ZFS
}

clonefs() {
	echo "The clonefs function is not used in DragonFly"
}

destroyfs() {
	[ $# -ne 2 ] && eargs name type
	local mnt
	mnt=$1
	[ -d ${mnt} ] || return 0

	mnt=$(realpath ${mnt})
	chflags -R noschg ${mnt}
	rm -rf ${mnt}
}

cleanup() {
	[ -n "${CLEANED_UP}" ] && return 0
	# Prevent recursive cleanup on error
	if [ -n "${CLEANING_UP}" ]; then
		[ -n "${INTERACTIVE_MODE}" -a ${INTERACTIVE_MODE} -eq 2 ] && return
		echo "Failure cleaning up. Giving up." >&2
		return
	fi
	export CLEANING_UP=1
	msg "Cleaning up"

	# Only bother with this if using jails as this may be being ran
	# from queue.sh or daemon.sh, etc.
	# If this is a builder, don't cleanup, the master will handle that.
	if [ -n "${MY_JOBID}" ]; then
		[ -n "${PKGNAME}" ] && clean_pool ${PKGNAME} 1 || :
		return 0
	fi

	bset epoch "0"

	if [ -d ${MASTERMNT}/poudriere/var/run ]; then
		for pid in ${MASTERMNT}/poudriere/var/run/*.pid; do
			# Ensure there is a pidfile to read or break
			[ "${pid}" = "${MASTERMNT}/poudriere/var/run/*.pid" ] && break
				pkill -15 -F ${pid} >/dev/null 2>&1 || :
		done
	fi
	wait

	jail_stop
	export CLEANED_UP=1
}

dismount() {
	[ $# -ne 1 ] && eargs mountpoint
	umount ${1} 2>/dev/null || :
}

create_slave() {
	[ $# -ne 1 ] && eargs job-number
	local task="${1}"
	local mnt=${MASTERMNT%/ref}/${task}
	local arch=$(jget ${jname} arch)

	if [ -f ${mnt}/virgin ]; then
	    job_msg "Jail     Mounting"
	    # Make one-time readonly duplicate of base image, virgin hidden
	    ${NULLMOUNT} -o rdonly ${MASTERMNT} ${mnt}
	    do_jail_mounts ${mnt} ${arch}
	    do_portbuild_mounts ${mnt} ${jname} ${ptname} ${setname}
	else
	    job_msg "Jail     Renovating"
	fi
	# Refresh /usr/local and /etc and /var
	mount_tmpfs -s 200M  tmpfs ${mnt}/tmp
	mount_tmpfs -s 12G   tmfps ${mnt}/wrkdirs
	mount_tmpfs -s 12M   tmpfs ${mnt}/etc
	mount_tmpfs -s 200M  tmpfs ${mnt}/var
	mount_tmpfs -s 12G   tmpfs ${mnt}/usr/local
	mount_tmpfs -s 40M   tmpfs ${mnt}/poudriere
	if [ "${LESS_SANDBOXING}" = "no" ]; then
		mount_tmpfs -s 2G    tmpfs ${mnt}/portdistfiles
		mount_tmpfs -s 1500M tmpfs ${mnt}/new_packages
	fi
	cp -a ${mnt}/etc2/* ${mnt}/etc/
	cp -a ${mnt}/var2/* ${mnt}/var/

	JAILMNT=${mnt} injail /usr/sbin/mtree -q -U -f \
	   /usr/ports/Templates/BSD.local.dist -d -e -p /usr/local >/dev/null

	job_msg "Jail     Ready"
}

destroy_slave() {
	[ $# -ne 1 ] && eargs job-number
	local stragglers
	local task="${1}"
	local mnt="${MASTERMNT%/ref}/${task}"
	local AWKCMD='{ if ($3 ~ mnt) { \
		len = length(mnt); \
		rest = substr($3, len+1); \
		if (       rest == "/etc" \
			|| rest == "/new_packages" \
			|| rest == "/portdistfiles" \
			|| rest == "/poudriere" \
			|| rest == "/tmp" \
			|| rest == "/usr/local" \
			|| rest == "/var" \
			|| rest == "/wrkdirs" \
		) print $3;
	}}'

	# make sure cwd is not on mount
	cd /

	mount | awk -v mnt="${mnt}" "${AWKCMD}" | sort -r | xargs umount || :
	# Possibly repeat dismount attempts in case some failed
	# This also helps reap mounts on previous failed attempts
	stragglers=$(mount | awk -v mnt="${mnt}" "${AWKCMD}" | sort -r)
	if [ -n "${stagglers}" ]; then
	   sleep 3
	   umount ${stagglers}
	fi
}

killtree() {
	local _pid=${1}
	local _sig=${2}
	local _child
	local _children

	# stop parent from attempting to folk
	if kill -17 ${_pid} 2>/dev/null; then
	   _children=$(pgrep -P ${_pid})
	   for _child in ${children}; do
	      killtree ${_child} ${_sig}
	   done
	   kill -${_sig} ${_pid}
	   pwait ${_pid} 2>/dev/null || :
	fi
}

check_mount() {
	[ $# -ne 1 ] && eargs jailname
	local mnt=$(jget ${1} mnt)
	local AWKCMD='{ if ($1 == mnt) print $3 }'
	mount | awk -v mnt="${mnt}" "${AWKCMD}"
	return 0
}

pid_active() {
	[ $# -ne 1 ] && eargs pidfile
	pgrep -q -F ${1}
}
